const pluralize = require('pluralize')
const Kind = require('../kind')
const Name = require('../name')
const { Extension, Assert, Field, Argument, RelatedAPI } = require('../type')
const { isUniquePath } = require('./utils')

module.exports = al => {
  Assert.validate({ array: al })
  const mutation =  new Extension({ name: 'Mutation' })
  const query = new Extension({ name: 'Query' })
  const timeDefs = []
  let relatedAPIs = []
  al.filter(d => d.model)
    .forEach(d => {
      timeDefs.push(
        new Extension({
          name: d.name,
          fields: [
            new Field({
              name: Name.FIELD_CREATED_AT,
              type: {
                name: Kind.DATE,
                format: 'X!',
              }
            }),
            new Field({
              name: Name.FIELD_UPDATED_AT,
              type: {
                name: Kind.DATE,
                format: 'X!'
              }
            })
          ]
        })
      )
      const creation = new Field({
        name: Name.objToCreationName(d.name),
        type: {
          name: Name.objToCreatePayloadName(d.name),
          format: 'X!'
        },
        arguments: [
          new Argument({
            name: 'input',
            type: {
              name: Name.objToCreateInputName(d.name),
              format: 'X!'
            }
          })
        ]
      })
      mutation.fields.push(creation)
      relatedAPIs = relatedAPIs.concat([
        new RelatedAPI({
          type: Kind.CRUD_CREATE_INPUT,
          name: Name.objToCreateInputName(d.name)
        }),
        new RelatedAPI({
          type: Kind.CRUD_CREATE_PAYLOAD,
          name: Name.objToCreatePayloadName(d.name)
        })
      ])
      const update = new Field({
        name: Name.objToUpdateName(d.name),
        type: {
          name: Name.objToUpdatePayloadName(d.name),
          format: 'X!'
        },
        arguments: [
          new Argument({
            name: 'input',
            type: {
              name: Name.objToUpdateInputName(d.name),
              format: 'X!'
            }
          })
        ]
      })
      mutation.fields.push(update)
      relatedAPIs = relatedAPIs.concat([
        new RelatedAPI({
          type: Kind.CRUD_UPDATE_INPUT,
          name: Name.objToUpdateInputName(d.name)
        }),
        new RelatedAPI({
          type: Kind.CRUD_UPDATE_PAYLOAD,
          name: Name.objToUpdatePayloadName(d.name),
        })
      ])
      const deletion = new Field({
        name: Name.objToDeleteName(d.name),
        type: {
          name: Name.objToDeletePayloadName(d.name),
          format: 'X!'
        },
        arguments: [
          new Argument({
            name: 'id',
            type: {
              name: 'ID',
              format: 'X!'
            }
          })
        ]
      })
      mutation.fields.push(deletion)
      relatedAPIs = relatedAPIs.concat([
        new RelatedAPI({
          type: Kind.CRUD_DELETE_PAYLOAD,
          name: Name.objToDeletePayloadName(d.name),
        })
      ])
      const findMultiple = new Field({
        name: Name.objToFindMultipleName(d.name),
        type: {
          name: Name.objToConnectionName(d.name),
          format: 'X!'
        },
        arguments: [
          new Argument({
            name: 'first',
            type: {
              name: 'Int',
              format: 'X',
            }
          }),
          new Argument({
            name: 'last',
            type: {
              name: 'Int',
              format: 'X'
            }
          }),
          new Argument({
            name: 'before',
            type: {
              name: 'String',
              format: 'X',
            }
          }),
          new Argument({
            name: 'after',
            type: {
              name: 'String',
              format: 'X'
            }
          }),
          new Argument({
            name: 'orderBy',
            type: {
              name: Name.objToOrderName(d.name),
              format: 'X'
            }
          }),
          new Argument({
            name: 'filter',
            type: {
              name: Name.objToFilterName(d.name),
              format: 'X'
            }
          })
        ]
      })
      query.fields.push(findMultiple)
      relatedAPIs = relatedAPIs.concat([
        new RelatedAPI({
          type: Kind.CRUD_ORDER,
          name: Name.objToOrderName(d.name),
        }),
        new RelatedAPI({
          type: Kind.CRUD_FILTER,
          name: Name.objToFilterName(d.name),
        }),
        new RelatedAPI({
          type: Kind.CRUD_CONNECTION,
          name: Name.objToConnectionName(d.name),
        })
      ])
      const uniquePaths = d.paths.filter(isUniquePath)
      const findOne = new Field({
        name: Name.objToFindOneName(d.name),
        arguments: uniquePaths.map(up => {
          const { field, path } = up
          return new Argument({
            name: path.map(p => p.name).join('_'),
            type: {
              name: field.type.name,
              format: 'X'
            }
          })
        }),
        type: {
          name: d.name,
          format: 'X'
        }
      })
      query.fields.push(findOne)
    })
  return {
    mutation,
    query,
    timeDefs,
    relatedAPIs,
  }
}
