const pluralize = require('pluralize')
const Kind = require('../kind')
const { Assert } = require('../type')

const OrderOps = {
  ASC: 1,
  DESC: -1,
}

const FilterOps = {
  AND: 'AND',
  OR: 'OR',
  BASIC: {
    EMPTY: '',
    NOT: 'not',
  },
  ARRAY: {
    IN: 'in',
    NOT_IN: 'not_in',
  },
  COMPARISON: {
    LT: 'lt',
    LTE: 'lte',
    GT: 'gt',
    GTE: 'gte',
  },
  STRING:  {
    CONTAINS: 'contains',
    NOT_CONTAINS: 'not_contains',
    STARTS_WITH: 'starts_with',
    NOT_STARTS_WITH: 'not_starts_with',
    ENDS_WITH: 'ends_with',
    NOT_ENDS_WITH: 'not_ends_with',
  }
}
const AllFilterOps = [
  FilterOps.BASIC,
  FilterOps.ARRAY,
  FilterOps.COMPARISON,
  FilterOps.STRING
].reduce((result, next) => result.concat(Object.values(next)), [])
const basicFilter = Object.values(FilterOps.BASIC)
const arrayFilter = Object.values(FilterOps.ARRAY)
const compareFilter = Object.values(FilterOps.COMPARISON)
const stringFilter = Object.values(FilterOps.STRING)
const orderNames = Object.keys(OrderOps)

const Name = {
  FALSE_QUERY: { _id: null },
  FIELD_CREATED_AT: 'createdAt',
  FIELD_UPDATED_AT: 'updatedAt',
  FIELD_ID: 'id',
  OPS: {
    [Kind.INT]: basicFilter.concat(arrayFilter).concat(compareFilter),
    [Kind.FLOAT]: basicFilter.concat(arrayFilter).concat(compareFilter),
    [Kind.DATE]: basicFilter.concat(arrayFilter).concat(compareFilter),
    [Kind.ID]: basicFilter.concat(arrayFilter).concat(compareFilter).concat(stringFilter),
    [Kind.STRING]: basicFilter.concat(arrayFilter).concat(compareFilter).concat(stringFilter),
    [Kind.BOOLEAN]: basicFilter,
    [Kind.ENUM]: basicFilter.concat(arrayFilter),
    [Kind.ORDER]: orderNames,
  },
  toNullableFormat(format) {
    Assert.validate({ string: format })
    return format.replace(/!$/, '')
  },
  objToSingularName(objName) {
    Assert.validate({ string: objName })
    return objName.toLocaleLowerCase()
  },
  queryToMethod(queryName) {
    Assert.validate({ string: queryName })
    if (this.findOneToObjName(queryName))
      return Kind.FIND_ONE
    if (this.findMultipleToObjName(queryName))
      return Kind.FIND_MULTIPLE
    return null
  },
  mutationToMethod(mutationName) {
    Assert.validate({ string: mutationName })
    if (this.creationToObjName(mutationName))
      return Kind.CREATION
    if (this.updateToObjName(mutationName))
      return Kind.UPDATE
    if (this.deletionToObjName(mutationName))
      return Kind.DELETE
    return null
  }
}

const inputName = () => {
  const nameMap = {}
  return {
    objToInputName(objName) {
      Assert.validate({ string: objName })
      const name = `${objName}Input`
      nameMap[name] = objName
      return name
    },
    inputToObjName(inputName) {
      Assert.validate({ string: inputName })
      return nameMap[inputName]
    }
  }
}

const creationName = () => {
  const nameMap = {}
  return {
    objToCreationName(objName) {
      Assert.validate({ string: objName })
      const name = `create${objName}`
      nameMap[name] = objName
      return name
    },
    creationToObjName(creationName) {
      Assert.validate({ string: creationName })
      return nameMap[creationName]
    },
  }
}

const updateName = () => {
  const nameMap = {}
  return {
    objToUpdateName(objName) {
      Assert.validate({ string: objName })
      const name = `update${objName}`
      nameMap[name] = objName
      return name
    },
    updateToObjName(updateName) {
      Assert.validate({ string: updateName })
      return nameMap[updateName]
    },
  }
}

const deletionName = () => {
  const nameMap = {}
  return {
    objToDeleteName(objName) {
      Assert.validate({ string: objName })
      const name = `delete${objName}`
      nameMap[name] = objName
      return name
    },
    deletionToObjName(deletionName) {
      Assert.validate({ string: deletionName })
      return nameMap[deletionName]
    },
  }
}

const findOneName = () => {
  const nameMap = {}
  return {
    objToFindOneName(objName) {
      Assert.validate({ string: objName })
      const name = objName.toLocaleLowerCase()
      nameMap[name] = objName
      return name
    },
    findOneToObjName(findOneName) {
      Assert.validate({ string: findOneName })
      return nameMap[findOneName]
    },
  }
}

const findMultipleName = () => {
  const nameMap = {}
  return {
    objToFindMultipleName(objName) {
      Assert.validate({ string: objName })
      const name = pluralize(objName.toLocaleLowerCase())
      nameMap[name] = objName
      return name
    },
    findMultipleToObjName(findMultipleName) {
      Assert.validate({ string: findMultipleName })
      const normalName = pluralize.singular(findMultipleName)
      return nameMap[findMultipleName]
    },
  }
}

const createInputName = () => {
  const nameMap = {}
  return {
    objToCreateInputName(objName) {
      Assert.validate({ string: objName })
      const name = `Create${objName}Input`
      nameMap[name] = objName
      return name
    },
    createInputToObjName(createInputName) {
      Assert.validate({ string: createInputName })
      return nameMap[createInputName]
    },
  }
}

const createPayloadName = () => {
  const nameMap = {}
  return {
    objToCreatePayloadName(objName) {
      Assert.validate({ string: objName })
      const name = `Create${objName}Payload`
      nameMap[name] = objName
      return name
    },
    createPayloadToObjName(createPayloadName) {
      Assert.validate({ string: createPayloadName })
      return nameMap[createPayloadName]
    },
  }
}

const updateInputName = () => {
  const nameMap = {}
  return {
    objToUpdateInputName(objName) {
      Assert.validate({ string: objName })
      const name = `Update${objName}Input`
      nameMap[name] = objName
      return name
    },
    updateInputToObjName(updateInputName) {
      Assert.validate({ string: updateInputName })
      return nameMap[updateInputName]
    },
  }
}

const updatePayloadName = () => {
  const nameMap = {}
  return {
    objToUpdatePayloadName(objName) {
      Assert.validate({ string: objName })
      const name = `Update${objName}Payload`
      nameMap[name] = objName
      return name
    },
    updatePayloadToObjName(updatePayloadName) {
      Assert.validate({ string: updatePayloadName })
      return nameMap[updatePayloadName]
    },
  }
}

const deletePayloadName = () => {
  const nameMap = {}
  return {
    objToDeletePayloadName(objName) {
      Assert.validate({ string: objName })
      const name = `Delete${objName}Payload`
      nameMap[name] = objName
      return name
    },
    deletePayloadToObjName(deletePayloadName) {
      Assert.validate({ string: deletePayloadName })
      return nameMap[deletePayloadName]
    },
  }
}

const idName = () => {
  const nameMap = {}
  return {
    fieldNameToId(fieldName, defName, refName) {
      Assert.validate({ strings: [ fieldName, defName, refName ]})
      const name = `${fieldName}Id`
      nameMap[`${defName}:${name}`] = refName
      return name
    },
    idToObjName(idName, defName) {
      Assert.validate({ strings: [idName, defName]})
      return nameMap[`${defName}:${idName}`]
    },
  }
}

const idsName = () => {
  const nameMap = {}
  return {
    fieldNameToIds(fieldName, defName, refName) {
      Assert.validate({ strings: [fieldName, defName, refName]})
      const name = `${pluralize.singular(fieldName)}Ids`
      nameMap[`${defName}:${name}`] = refName
      return name
    },
    idsToObjName(idsName, defName) {
      Assert.validate({ strings: [idsName, defName]})
      return nameMap[`${defName}:${idsName}`]
    },
  }
}
const orderName = () => {
  const nameMap = {}
  return {
    objToOrderName(objName) {
      Assert.validate({ string: objName })
      const name = `${objName}OrderBy`
      nameMap[name] = objName
      return name
    },
    orderToObjName(orderName) {
      Assert.validate({ string: orderName })
      return nameMap[orderName]
    },
  }
}

const filterName = () => {
  const nameMap = {}
  return {
    objToFilterName(objName) {
      Assert.validate({ string: objName })
      const name = `${objName}Filter`
      nameMap[name] = objName
      return name
    },
    filterToObjName(filterName) {
      Assert.validate({ string: filterName })
      return nameMap[filterName]
    },
  }
}

const connectionName = () => {
  const nameMap = {}
  return {
    objToConnectionName(objName) {
      Assert.validate({ string: objName })
      const name = `${objName}Connection`
      nameMap[name] = objName
      return name
    },
    connectionToObjName(connectionName) {
      Assert.validate({ string: connectionName })
      return nameMap[connectionName]
    },
  }
}

module.exports = Object.assign(
  {},
  { ORDER_OPS: OrderOps },
  { FILTER_OPS: FilterOps },
  { ALL_FILTER_OPS: AllFilterOps },
  Name,
  inputName(),
  creationName(),
  updateName(),
  deletionName(),
  findOneName(),
  findMultipleName(),
  createInputName(),
  createPayloadName(),
  updateInputName(),
  updatePayloadName(),
  deletePayloadName(),
  idName(),
  idsName(),
  orderName(),
  filterName(),
  connectionName()
)
