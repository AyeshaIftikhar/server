const Kind = require('../kind')
const Name = require('../name')
const { Store } = require('../state')
const { defListToMap } = require('../language/utils')
const { hasValue } = require('./utils')

module.exports = () => {
  const resolvers = {}
  const { gql: { accessList } } = Store.get()
  const modelList = accessList.filter(d => d.kind === Kind.TYPE_OBJECT && d.model)
  const modelMap = defListToMap(modelList)
  for(let i = 0; i < modelList.length; i++) {
    const def = modelList[i]
    resolvers[def.name] = {}
    def.fields.forEach(f => {
      if (modelMap[f.type.name]) {
        switch(f.type.format) {
          case 'X':
          case 'X!':
            resolvers[def.name][f.name] = (root, input, { collections }) => {
              const idName = Name.fieldNameToId(f.name, def.name, f.type.name)
              const value = root[idName]
              const refCollection = collections[f.type.name]
              return refCollection.findOne({ id: value })
            }
            break
          case '[X]':
          case '[X!]':
          case '[X]!':
          case '[X!]!':
            resolvers[def.name][f.name] = (root, input, { collections }) => {
              const idName = Name.fieldNameToIds(f.name, def.name, f.type.name)
              let value = []
              if (hasValue(root[idName])) {
                value = root[idName]
              }
              const refCollection = collections[f.type.name]
              return refCollection.find({ id: {$in: value} }).toArray()
            }
            break
        }
      }
    })
  }
  return resolvers
}
