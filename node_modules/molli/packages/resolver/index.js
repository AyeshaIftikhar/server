const { makeExecutableSchema } = require('graphql-tools')
const Kind = require('../kind')
const { Hub, Event, Store } = require('../state')
const mutation = require('./mutation')
const query = require('./query')
const node = require('./node')
const supTypes = require('./supTypes')

Hub.on(Event.API_UPDATED, () => {
  const state = Store.get()
  const { gql: { content, genText, accessList }, mongo: { db } } = state
  const typeDefs = [content, genText].join('\n')
  const collections = accessList
    .filter(d => d.model && Kind.TYPE_OBJECT)
    .reduce((r, n) => {
      r[n.name] = db.collection(n.name)
      return r
    }, {})
  state.server.set({
    gqlEntry: (req) => ({
      schema: makeExecutableSchema({
        typeDefs,
        resolvers: Object.assign(
          {},
          { Mutation: mutation() },
          { Query: query() },
          supTypes(),
          node(),
        )
      }),
      context: {
        collections,
      }
    })
  })
})
