const { GraphQLScalarType } = require('graphql/type')
const { Store } = require('../state')
const Kind = require('../kind')

module.exports = () => {
  const resolvers = {}
  const { gql: { supTypes } } = Store.get()
  for(let i = 0; i < supTypes.length; i++) {
    const supType = supTypes[i]
    switch(supType.name) {
      case Kind.DATE:
        resolvers[supType.name] = new GraphQLScalarType({
          name: 'Date',
          description: 'Date custom scalar type',
          parseValue(value) {
            return new Date(value)
          },
          serialize(value) {
            return value.getTime()
          },
          parseLiteral(ast) {
            if (ast.kind === Kind.INT) {
              const value = parseInt(ast.value, 10)
              return new Date(value)
            }
            return null
          },
        })
        break
    }
  }
  return resolvers
}
