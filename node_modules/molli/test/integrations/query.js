const { request } = require('graphql-request')
const Chance = require('chance')
const expect = require('chai').expect
const Mongo = require('../../packages/mongo')
const { Hub, Event, Store } = require('../../packages/state')
require('../../packages/server')
require('../../packages/language')
require('../../packages/resolver')
const chance = new Chance()

Hub.on(Event.API_UPDATED, () => {
  const state = Store.get()
  const { mongo: { db } } = state
  const Book = db.collection('Book')
  describe('Query', () => {
    beforeEach(async() => {
      await Book.remove({})
    })
    afterEach(async() => {
      await Book.remove({})
    })
    after(() => {
      process.exit(0)
    })
    it('should search items', async() => {
      const { createBook: { book } } = await request(
        'http://127.0.0.1:3000/graphql',
        `
          mutation createBook($input: CreateBookInput!) {
            createBook(input: $input) {
              book {
                id
                title
                createdAt
                updatedAt
              }
            }
          }
        `,
        {
          input: {
            title: chance.name(),
          }
        }
      )
      const b = await request(
        'http://127.0.0.1:3000/graphql',
        `
        {
          books(first: 1) {
            pageInfo {
              hasNext
              hasPrev
              end
              start
            }
            nodes {
              id
              title
              createdAt
              updatedAt
            }
            totalCount
          }
        }
        `,
        {}
      )
      expect(b.books.nodes.length).to.equal(1)
    })
    it('should search an item', async() => {
      const { createBook: { book } } = await request(
        'http://127.0.0.1:3000/graphql',
        `
          mutation createBook($input: CreateBookInput!) {
            createBook(input: $input) {
              book {
                id
                title
                createdAt
                updatedAt
              }
            }
          }
        `,
        {
          input: {
            title: chance.name(),
          }
        }
      )
      const b = await request(
        'http://127.0.0.1:3000/graphql',
        `
          query book($id: ID!) {
            book(id: $id) {
              id
              title
              createdAt
              updatedAt
            }
          }
        `,
        {
          id: book.id
        }
      )
      expect(b.book).to.not.equal(null)
    })
    it('should delete an item', async() => {
      const { createBook: { book } } = await request(
        'http://127.0.0.1:3000/graphql',
        `
          mutation createBook($input: CreateBookInput!) {
            createBook(input: $input) {
              book {
                id
                title
                createdAt
                updatedAt
              }
            }
          }
        `,
        {
          input: {
            title: chance.name(),
          }
        }
      )
      const { deleteBook } = await request(
        'http://127.0.0.1:3000/graphql',
        `
          mutation deleteBook($id: ID!) {
            deleteBook(id: $id) {
              book {
                id
                title
                createdAt
                updatedAt
              }
            }
          }
        `,
        {
          id: book.id,
        }
      )
      const item = await Book.findOne({ id: book.id })
      expect(item).to.equal(null)
    })
    it('should update an item', async() => {
      const { createBook: { book } } = await request(
        'http://127.0.0.1:3000/graphql',
        `
          mutation createBook($input: CreateBookInput!) {
            createBook(input: $input) {
              book {
                id
                title
                createdAt
                updatedAt
              }
            }
          }
        `,
        {
          input: {
            title: chance.name(),
          }
        }
      )
      const title = chance.name()
      const { updateBook: { book: bo } } = await request(
        'http://127.0.0.1:3000/graphql',
        `
          mutation updateBook($input: UpdateBookInput!) {
            updateBook(input: $input) {
              book {
                id
                title
                createdAt
                updatedAt
              }
            }
          }
        `,
        {
          input: {
            id: book.id,
            title: title,
          }
        }
      )
      const item = await Book.findOne({ id: bo.id })
      expect(item.title).to.equal(title)
    })
    it('should insert an item', async() => {
      const mutation = `
        mutation createBook($input: CreateBookInput!) {
          createBook(input: $input) {
            book {
              id
              title
              createdAt
              updatedAt
            }
          }
        }
      `
      const title = chance.name()
      const variables = {
        input: {
          title,
        }
      }
      const { createBook: { book } } = await request('http://127.0.0.1:3000/graphql', mutation, variables)
      const item = await Book.findOne({ id: book.id })
      item.createdAt = item.createdAt.getTime()
      item.updatedAt = item.updatedAt.getTime()
      expect(item).to.includes(book)
    })
  })
})

Hub.on(Event.MONGO_CONNECTED, () => {
  const content = `
    type Book @model {
      id: ID! @isUnique
      title: String
    }
  `
  const state = Store.get()
  state.gql.set({ content })
  Hub.emit(Event.GQL_UPDATED)
})
Hub.emit(Event.STARTUP)
