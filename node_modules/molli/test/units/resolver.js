const buildAL = require('../../packages/language/buildAL')
const supTypes = require('../../packages/language/supTypes')
const Name = require('../../packages/name')
const expect = require('chai').expect
const {
  getPathValue,
  uniquePathToQuery,
  filterPathToQuery,
} = require('../../packages/resolver/utils')

const source = `
  type Profile {
    name: [String]
  }
  type User {
    id: ID! @isUnique
    username: String! @isUnique
    password: String
    profile: [Profile]
  }
`
const al = buildAL(source, supTypes)
const def = al.find(d => d.name === 'User')

describe('Resolver', () => {
  it('get query from filter paths', () => {
    const idPath = def.paths.find(p => p.path.map(p => p.name).join('.') === 'id')
    const profileNamePath = def.paths.find(p => p.path.map(p => p.name).join('.') === 'profile.name')
    const q1 = filterPathToQuery({ paths: [idPath], filter: {id_not_in: null}})
    const q2 = filterPathToQuery({ paths: [profileNamePath], filter: {'profile_name_in': ['taind']} })
    const q3 = filterPathToQuery({ paths: [profileNamePath], filter: {
      AND: [
        {
          'profile_name': 'taind',
          'profile_name_in': ['a']
        },
        {
          OR: [
            {
              'profile_name': 'huge',
            }
          ]
        }
      ]
    }})
    expect(q1).to.deep.equal({})
    expect(q2).to.deep.equal({$and: [{'profile.name': {$in: ['taind']}}]})
    expect(q3).to.deep.equal({
      $and: [
        {
          $and: [
            {
              $and: [
                {'profile.name': 'taind'},
                {'profile.name': {$in: ['a']}}
              ]
            },
            {
              $and: [
                {
                  $or: [
                    {
                      $and: [
                        {'profile.name': 'huge'}
                      ]
                    }
                  ]
                }
              ]
            }
          ],
        }
      ]
    })
  })
  it('get query from unique paths', () => {
    const idPath = def.paths.find(p => p.path.map(p => p.name).join('.') === 'id')
    const profileNamePath = def.paths.find(p => p.path.map(p => p.name).join('.') === 'profile.name')
    const q1 = uniquePathToQuery({ paths: [idPath], input: { id: null } })
    const q2 = uniquePathToQuery({ paths: [profileNamePath], input: { profile: null}})
    const q3 = uniquePathToQuery({ paths: [idPath, profileNamePath], input: { id: 123, profile: [{ name: ['taind'] }] } })
    expect(q1).to.deep.equal({$or: [{id: {$in: [null]}}]})
    expect(q2).to.deep.equal(Name.FALSE_QUERY)
    expect(q3).to.deep.equal({
      $or: [
        {id: {$in: [123]}},
        {'profile.name': {$in: [['taind']]}}
      ]
    })
  })
  it('should get value of a path', () => {
    const pathName = 'profile.name'
    const path = def.paths.find(p => p.path.map(p => p.name).join('.') === 'profile.name');
    [
      { username: 'duytainguyen' },
      { profile: null },
      { profile: [] },
      { profile: [null] },
      { profile: [{name: null}] },
    ].forEach((input, index) => {
      const value = getPathValue(path, input)
      if (index !== 4) {
        expect(value).to.deep.equal([])
      } else {
        expect(value).to.deep.equal([null])
      }
    })
    const input = {
      profile: [
        null,
        { name: ['duy tai nguyen'] },
        null,
        { name: [null]},
        { name: ['test', null] },
        { name: ['t', 'u'] },
      ]
    }
    const value = getPathValue(path, input)
    expect(value).to.deep.equal([['duy tai nguyen'], [null], ['test', null], ['t', 'u']])
  })
})
